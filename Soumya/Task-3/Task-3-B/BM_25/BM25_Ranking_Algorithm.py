
import json
import math
import operator
from collections import defaultdict, OrderedDict, Counter
import sys


def BM25_Ranking_algorithm():

	
	index_file = sys.argv[1]
	queries_file = sys.argv[2]
	
## Calculating dl,avdl values from the files generated by inverted_index.py
	Tokens_count = "number_of_tokens_one_gram.txt"
	one_gram_tokens = json.load(open(Tokens_count))

	N = len(one_gram_tokens)
	sum_tokens= sum(x['tokens_count'] for x in one_gram_tokens.values())
	avdl= float(sum_tokens/N)

	query_terms = defaultdict(int)
	bm25 = defaultdict(float)
	index = json.load(open(sys.argv[1]))
			
	k1 = 1.2 
	b = 0.75
	k2 = 100
	

	with open(queries_file, 'r') as query_file:
		
		query_id = 1
		for query_line in query_file.readlines():
			query = query_line.split()
			

			for term in query:
				query_terms[term] += 1
			
			with open('index_with_query.txt', 'a+') as file_object:
				for term in query_terms:
					file_object.write(str(term) +"\n")
				
					file_object.write(str(index) +"\n"+"\n")
				
					ni = len(index[term])
				
					for doc_id,tf in index[term].items():

						# R and r are zeroes as there is no relevance

						term1 =  (N - ni + 0.5) / (ni + 0.5)
						K = k1*((1-b) + (b* (one_gram_tokens[doc_id]['tokens_count'] / avdl)))
						term2 =  ((k1 + 1) * tf) / (K + tf)
						term3 =  ((k2 + 1) * query_terms[term]) / (k2 + query_terms[term])
						bm25[doc_id] += math.log(term1)*term2*term3

			
				sorted_index = OrderedDict(sorted(bm25.items(), key=operator.itemgetter(1), reverse=True))
				Top_100 = Counter(bm25).most_common(100)

			BM_25_rank = 1
			with open ("BM_25_Stemmed_Output\\Query "+ str(query_id)+".txt","w") as bm25_score:
				for doc,score in Top_100:
					bm25_score.write (str(query_id)  + "  "+ "Q0"+"  "+str(doc) + "  "+str(BM_25_rank)   +  "  "+str(score)+" " + "SS" +"\n")
					 	
					BM_25_rank += 1
			
				
			query_id += 1
			query_terms.clear()

BM25_Ranking_algorithm()